generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(uuid()) @db.VarChar(36)
  fullName     String         @map("full_name") @db.VarChar(100)
  dateOfBirth  DateTime?      @map("date_of_birth") @db.Date
  email        String         @unique @db.VarChar(100)
  password     String?        @db.VarChar(100)
  phoneNumber  String?        @unique @map("phone_number") @db.VarChar(15)
  photoProfile String?        @map("photo_profile") @db.VarChar(200)
  verified     Boolean?       @default(false)
  userProvider UserProvider   @default(LOCAL)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")
  userRole     UserRole       @map("user_role")
  status       UserStatus     @default(INACTIVE)
  Order        Order[]
  ShoppingCart ShoppingCart[]
  UserAddress  UserAddress[]
  UserStore    UserStore[]
  categoryLogs CategoryLog[]
  stockHistory StockHistory[]

  @@map("users")
}

enum UserProvider {
  LOCAL
  GOOGLE

  @@map("user_providers")
}

model UserAddress {
  id          String    @id @default(uuid()) @db.VarChar(36)
  city        String    @db.VarChar(100)
  province    String    @db.VarChar(100)
  subdistrict String    @db.VarChar(100)
  address     String
  latitude    Decimal   @db.Decimal(9, 6)
  longitude   Decimal   @db.Decimal(9, 6)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  userId      String    @map("user_id") @db.VarChar(36)
  user        User      @relation(fields: [userId], references: [id])

  @@map("user_addresses")
}

model Store {
  id          String      @id @default(uuid()) @db.VarChar(36)
  name        String      @db.VarChar(100)
  logo        String      @db.VarChar(200)
  description String
  city        String      @db.VarChar(100)
  province    String      @db.VarChar(100)
  subdistrict String      @db.VarChar(100)
  address     String
  latitude    Decimal     @db.Decimal(9, 6)
  longitude   Decimal     @db.Decimal(9, 6)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")
  status      StoreStatus
  stocks      Stock[]
  UserStore   UserStore[]
  Order       Order[]

  @@map("stores")
}

model UserStore {
  userId  String
  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, storeId])
  @@map("user_stores")
}

model Order {
  id           String      @id @default(uuid()) @db.VarChar(36)
  totalPrice   Int         @map("total_price")
  discount     Int
  finalPrice   Int         @map("final_price")
  paymentProof String?     @map("payment_proof")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  deletedAt    DateTime?   @map("deleted_at")
  userId       String      @map("user_id") @db.VarChar(36)
  storeId      String      @map("store_id") @db.VarChar(36)
  status       OrderStatus

  OrderItems OrderItems[]
  StatusLogs OrderStatusLog[]

  user     User      @relation(fields: [userId], references: [id])
  store        Store       @relation(fields: [storeId], references: [id])
  Shipment Shipment?

  @@map("orders")
}

model OrderItems {
  id        String    @id @default(uuid()) @db.VarChar(36)
  quantity  Int
  price     Int
  subTotal  Int       @map("sub_total")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  orderId   String    @map("order_id") @db.VarChar(36)
  productId String    @map("product_id") @db.VarChar(36)
  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderStatusLog {
  id        String      @id @default(uuid()) @db.VarChar(36)
  orderId   String      @map("order_id") @db.VarChar(36)
  oldStatus OrderStatus @map("old_status")
  newStatus OrderStatus @map("new_status")
  changedBy String?     @map("changed_by") @db.VarChar(36)
  note      String?     @db.Text
  createdAt DateTime    @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_status_logs")
}

model Shipment {
  id             String    @id @default(uuid()) @db.VarChar(36)
  orderId        String    @unique @map("order_id") @db.VarChar(36)
  trackingNumber String    @unique @map("tracking_number") @db.VarChar(50)
  courier        String    @db.VarChar(10)
  service        String    @db.VarChar(30)
  shippingCost   Int       @map("shipping_cost")
  shippingDays   String    @map("shipping_days") @db.VarChar(30)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  order          Order     @relation(fields: [orderId], references: [id])

  @@map("shipments")
}

model ShoppingCart {
  id               String             @id @default(uuid()) @db.VarChar(36)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  deletedAt        DateTime?          @map("deleted_at")
  isActive         Boolean            @default(true) @map("is_active")
  userId           String             @map("user_id") @db.VarChar(36)
  ShoppingCartItem ShoppingCartItem[]
  user             User               @relation(fields: [userId], references: [id])

  @@map("shopping_carts")
}

model ShoppingCartItem {
  id        String       @id @default(uuid()) @db.VarChar(36)
  cartId    String       @map("cart_id") @db.VarChar(36)
  productId String       @map("product_id") @db.VarChar(36)
  quantity  Int
  price     Int
  subTotal  Int          @map("sub_total")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")
  cart      ShoppingCart @relation(fields: [cartId], references: [id])
  product   Product      @relation(fields: [productId], references: [id])

  @@map("shopping_cart_items")
}

model Category {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String    @db.VarChar(200)
  slug        String?   @unique
  description String?   @db.Text
  parentId    String?   @db.VarChar(36)
  parent      Category? @relation("CategoryChildren", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryChildren")
  isActive    Boolean   @default(true)
  deletedAt   DateTime?
  createdBy   String?   @db.VarChar(36)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt  // tambahin default supaya migration aman

  products    Product[]
  logs        CategoryLog[]

  @@unique([name])
  @@index([parentId])
  @@map("categories")
}

model CategoryLog {
  id          String   @id @default(uuid()) @db.VarChar(36)
  categoryId  String   @db.VarChar(36)
  category    Category @relation(fields: [categoryId], references: [id])
  action      String   // e.g. "CREATE", "UPDATE", "SOFT_DELETE", "RESTORE"
  payload     Json?    // snapshot of payload / changes (optional)
  performedBy String?   @db.VarChar(36)
  performedByUser User? @relation(fields: [performedBy], references: [id])
  createdAt   DateTime @default(now())

  @@index([categoryId])
  @@map("category_logs")
}

model Product {
  id               String             @id @default(uuid()) @db.VarChar(36)
  name             String             @unique @db.VarChar(200)
  sku              String?            @unique @db.VarChar(50)
  description      String?
  price            Int
  isActive         Boolean            @default(true) @map("is_active")
  categoryId       String?            @map("category_id") @db.VarChar(36)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  deletedAt        DateTime?          @map("deleted_at")
  weight_g         Int?               @map("weight_g")
  OrderItems       OrderItems[]
  ProductDiscounts ProductDiscount[]
  images           ProductImage[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  ShoppingCartItem ShoppingCartItem[]
  stocks           Stock[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid()) @db.VarChar(36)
  productId String   @map("product_id") @db.VarChar(36)
  url       String   @db.VarChar(255)
  publicId  String?  @map("public_id") @db.VarChar(255)
  altText   String?  @map("alt_text") @db.VarChar(255)
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Stock {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  histories StockHistory[]
  
  @@unique([productId, storeId])
}

model StockHistory {
  id              String           @id @default(uuid())
  stock           Stock            @relation(fields: [stockId], references: [id])
  stockId         String
  changeType      StockChangeType
  journalType     StockJournalType
  oldQuantity     Int
  newQuantity     Int
  quantityChange  Int
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime         @default(now())
}

model Discount {
  id               String            @id @default(uuid()) @db.VarChar(36)
  code             String?           @unique @db.VarChar(100)
  name             String            @db.VarChar(150)
  isPercentage     Boolean           @default(false) @map("is_percentage")
  value            Int
  minSpend         Int?              @map("min_spend")
  buyQuantity      Int?              @map("buy_quantity")
  freeQuantity     Int?              @map("free_quantity")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  discountType     DiscountType      @map("discount_type")
  ProductDiscounts ProductDiscount[]

  @@map("discounts")
}

model ProductDiscount {
  id         String   @id @default(uuid()) @db.VarChar(36)
  productId  String   @map("product_id") @db.VarChar(36)
  discountId String   @map("discount_id") @db.VarChar(36)
  createdAt  DateTime @default(now()) @map("created_at")
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, discountId])
  @@map("product_discounts")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@map("user_status")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN_STORE
  CUSTOMER

  @@map("user_roles")
}

enum StoreStatus {
  ACTIVE
  INACTIVE

  @@map("store_status")
}

enum OrderStatus {
  INITIAL
  WAITING_FOR_PAYMENT
  WAITING_CONFIRMATION_PAYMENT
  IN_PROCESS
  DELIVERED
  ORDER_CONFIRMATION
  CANCELLED

  @@map("order_status")
}

enum StockChangeType {
  INCREASE
  DECREASE
  ADJUSTMENT

  @@map("stock_change_type")
}

enum StockJournalType {
  PURCHASE
  SALE
  RETURN
  TRANSFER
  ADJUSTMENT
  OTHER

  @@map("stock_journal_type")
}

/// *
///  * Discount rules:
///  * - discountType: MANUAL (applied manually to product)
///  * MIN_SPEND (minSpend must be met)
///  * BUY_X_GET_Y (buyQuantity + freeQuantity)
///  * - value: integer amount or percent depending on isPercentage flag
enum DiscountType {
  MANUAL
  MIN_SPEND
  BUY_X_GET_Y

  @@map("discount_type")
}
